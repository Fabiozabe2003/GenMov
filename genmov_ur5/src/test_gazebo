#!/usr/bin/env python3
import time
#import roslib; roslib.load_manifest('ur_driver')
import rospy
import actionlib
from control_msgs.msg import *
from trajectory_msgs.msg import *
from lab4functions import *



if __name__ == '__main__':
    
    rospy.init_node("test1", disable_signals=True)

    robot_client = actionlib.SimpleActionClient('follow_joint_trajectory', FollowJointTrajectoryAction)

    print("Waiting for server...")
    robot_client.wait_for_server()
    print("Connected to server")

    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
    Q0 = [0.0, -1, -1.7, -2.2, -1.6, 0.0]

    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Initial position
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    rate = rospy.Rate(10)


    import numpy as np

    # Desired pose
    Rd = roty(np.pi)
    qd = rot2quat(Rd)
    # Find an xd that the robot can reach
    xd = np.array([0, -0.55, 0.4, qd[0], qd[1], qd[2], qd[3]])
    xd2 = np.array([0 - 0.2, -0.55 + 0.1, 0.4, qd[0], qd[1], qd[2], qd[3]])
    xd3 = np.array([0, -0.55 +0.1, 0.6, qd[0], qd[1], qd[2], qd[3]])
    xd4 = np.array([0, -0.55 +0.1, 0.4, qd[0], qd[1], qd[2], qd[3]])
    xd5 = np.array([0 - 0.2,  -0.55, 0.4, qd[0], qd[1], qd[2], qd[3]])
    puntos = np.array([xd,xd2,xd3,xd4,xd5])
    k = 0.8
    dt = 0.1 # A partir del rate

    iterations = 1000

    while not rospy.is_shutdown():
        for punto in puntos:
            xd = punto
            
            for i in range(iterations):
                robot_client.cancel_goal()

                
                # Modification of the motion
                T = fkine_ur5(Q0)
                x =  TF2xyzquat(T)
                error = x - xd
                #werror = xd[3]*x[3] + xd[4:7].T@x[4:7]
                #eerror = -xd[3]*x[4:7]+x[3]*xd[4:7]-np.cross(xd[4:7],x[4:7])
                #error[3] = werror
                #error[4:7] = eerror
                derror = -k*error

                if (np.linalg.norm(error) < 0.01):
                    T = fkine_ur5(Q0)
                    print(qd)
                    print(rot2quat(T[0:3,0:3]))
                    print(T)
                    break 

                J = jacobian_pose(Q0)

                if (np.linalg.matrix_rank(J, 1e-4)<7):
                    dq = (J.T @ np.linalg.inv(J@J.T + 0.01*np.eye(7))).dot(derror)
                    Q0 =  Q0 + dt*dq
                
                else:
                    dq = np.linalg.pinv(J).dot(derror)
                    Q0 =  Q0 + dt*dq


                g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6, time_from_start=rospy.Duration(0.008))]
                robot_client.send_goal(g)
                robot_client.wait_for_result()

                rate.sleep()

        break
    robot_client.cancel_goal()
