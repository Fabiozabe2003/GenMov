#!/usr/bin/env python3
import rospy
from sensor_msgs.msg import JointState
from markers import *
from lab4functions import *

if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testControlPoints")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
 
    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])
    bmarker_desired_elbow = BallMarker(color['BLUE'])

     # Joint names
    jnames = ("head_pan", "right_j0", "right_j1", "right_j2", "right_j3","right_j4", "right_j5", "right_j6")

    # Gets points
    # poner ruta correspondiente
    hand_points = np.loadtxt('/home/andres/proy_ws/src/GenMov/genmov_sawyer/src/right_hand_points.txt', dtype=float) 
    elbow_points = np.loadtxt('/home/andres/proy_ws/src/GenMov/genmov_sawyer/src/right_forearm_points.txt', dtype=float) 

    # Desired initial position
    it=0
    xd = hand_points[it]
    xd_elbow = elbow_points[it]

    # Initial configuration
    q0 = np.array([-pi/2, 2, 0.0, 0, 1.2, 0.0, 0.0])

    # Resulting initial position (end effector with respect to the base link)
    T = fkine_sawyer(q0)
    x0 = T[0:3,3]

    # Red marker shows the achieved position
    bmarker_current.xyz(x0)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd)
    bmarker_desired_elbow.xyz(xd_elbow)

    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames

    # Add the head joint value (with value 0) to the joints
    q0[3]=-q0[3]
    q_wh=np.append(0.0,q0)
    jstate.position = q_wh
    
    # Frequency (in Hz) and control period 
    freq = 200
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = copy(q0)
    # k de control
    k = 0.8; k2 = 0.8

    # Main loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        
        # Kinematic control law for position
        # Invert due to model
        q[3]=-q[3]

        # Transform and position
        T = fkine_sawyer(q)
        x = T[0:3,3]
        T2 = fkine_sawyer_codo(q)
        x_elbow = T2[0:3,3]
        
        # Error
        error = x - xd
        derror = -k*error
        error_elbow = x_elbow - xd_elbow
        derror_elbow = -k2*error_elbow
        
        # Jacobian of robot and until elbow
        Jacobian=jacobian_sawyer(q)
        Jacobian_elbow=jacobian_sawyer_codo(q)
        if np.linalg.det(Jacobian@Jacobian.T ) < 0.00001:
            print("singularidad !")
            break

        # Moore-Penrose Pseudoinverse 
        pseudoinverse = np.linalg.pinv(Jacobian)
        P1 = np.eye(7) - pseudoinverse@Jacobian
        pseudoinverse_elbow = np.linalg.pinv(Jacobian_elbow@P1)

        # Control Law
        dq = pseudoinverse.dot(derror) + pseudoinverse_elbow.dot(derror_elbow-Jacobian_elbow@pseudoinverse@derror)
        #dq = np.linalg.pinv(Jacobian).dot(derror)
        q = q + dt*dq
        
        
        # Publish the message
        q[3]=-q[3]
        q_wh=np.append(0.0,q)
        jstate.position = q_wh
        
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(x)

        if (np.linalg.norm(error) < 0.01): #se quit칩 un 0 para que sea m치s r치pido
            print("Iteraci칩n ",it," completa")
            if it==len(hand_points)-1: break
            it+=1
            xd = hand_points[it]
            xd_elbow = elbow_points[it]

        # Wait for the next iteration
        rate.sleep()

    print('ending motion ...')
 