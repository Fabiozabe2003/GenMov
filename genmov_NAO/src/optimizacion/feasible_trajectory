#!/usr/bin/env python3
import casadi as ca
from casadi import *
from forward_kinematics import *
from nao_dynamics import *
from nao_jacobian import *
from nao_limits import *
from read_data import *
import time
import numpy as np
from nao_skills import *
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import rospy
from sensor_msgs.msg import JointState
import tf2_ros
import geometry_msgs.msg
from scipy.spatial.transform import Rotation as R


# Matrices dinamicas
model_path = "/home/invitado8/proy_ws/src/nao/nao_utec/urdf/"
urdf_filename = "naoV40red.urdf"
urdf_model_path = join(model_path, urdf_filename)

model = pin.buildModelFromUrdf(urdf_model_path, pin.JointModelFreeFlyer())
data = model.createData()
M_din,b_din = dynamic_matrices_fun(model)
dynamic_ddq = build_dynamic_ddq()
Jacobian_contacts = build_Jacobian_contacts()


reconstructed_data=reconstruct("throw_object.csv")
left_hand_points=reconstructed_data["lhand"]
right_hand_points=reconstructed_data["rhand"]
left_elbow_points=reconstructed_data["lforearm"]
right_elbow_points=reconstructed_data["rforearm"]
N=len(left_hand_points)


joint_indices = {
    "l_arm": slice(14 + 6, 20 + 6),
    "r_arm": slice(20 + 6 , 26 + 6),
    "f_base": slice(0,6),
    "l_leg": slice(2  + 6, 8 + 6),
    "r_leg": slice(8 + 6, 14 +6),
}



Dof = 32 # 32 cuando agregue los 6 de la base lotante
Dof_act = 26  #26 qs actuados
#N = 35
q = MX.sym('q',Dof*N) # variable 'q' de cuerpo completo
tau = MX.sym('tau',Dof_act*N)  # par para articulaciones actuadas
f_contact = MX.sym('f_contact', 3*8*(N))  # fuerzas de contacto (4 por pie)
S = ca.vertcat(ca.DM.zeros(6, 26), ca.DM_eye(26) )  # Dimensión: 32x26
f_des = ca.DM([0, 0, 5.4 * 9.81 / 8])  # Vector de 24 elementos: [0, 0, mg/8, ..., 0, 0, mg/8]


start = time.time()

f=0 # costo
dt = 0.05
mu = 0.35 # inventado

total_constraints = Dof_act*(N-1) + 12*(N) + 8*(N-2) + Dof*(N-2)
print("Restricciones de g:",total_constraints)

lbg=[0]*total_constraints
ubg=[0]*total_constraints
g=[0]*total_constraints # rebisar bien , posible error 

dt = 0.05
idx = 0

p_rfijo = [0.03, -0.05 , 0]
p_lfijo = [0.03, 0.05 , 0]

r_rfijo =  np.array ([[1, 0, 0],
                      [0, 0, 1],
                      [0, -1, 0]]) 

r_lfijo =  np.array ([[1, 0, 0],
                      [0, 0, 1],
                      [0, -1, 0]]) 



for i in range(N):
    q_i = q[Dof*i :Dof*(i+1)]  
    q_i_larm =  q_i[joint_indices["l_arm"]]
    q_i_rarm =  q_i[joint_indices["r_arm"]]
    q_i_base = q_i[joint_indices["f_base"]]


    f += ca.sumsqr(ca.vertcat(*fkine_left_arm(q_i_larm)[0:3,3])-ca.vertcat(*left_hand_points[i]))   # Mano izquierda
    f +=  ca.sumsqr(ca.vertcat(*fkine_left_elbow(q_i_larm)[0:3,3])-ca.vertcat(*left_elbow_points[i]))  # Codo izquierdo
    f += ca.sumsqr(ca.vertcat(*fkine_right_arm(q_i_rarm)[0:3,3])-ca.vertcat(*right_hand_points[i]))   # Mano derecha
    f +=  ca.sumsqr(ca.vertcat(*fkine_right_elbow(q_i_rarm)[0:3,3])-ca.vertcat(*right_elbow_points[i]))  # Codo derecho


    #f += 10 * (q_i_base[3]**2 + q_i_base[4]**2)

    # Restriccion phi(q) = 0
    q_i_lleg = q_i[joint_indices["l_leg"]]
    q_i_rleg = q_i[joint_indices["r_leg"]]

    T_lleg = fkine_left_foot_constant(q_i_lleg,q_i_base,'c')
    p_lleg = T_lleg[0:3,3]
    r_lleg = T_lleg[0:3,0:3]

    T_rleg = fkine_right_foot_constant(q_i_rleg,q_i_base,'c')
    p_rleg = T_rleg[0:3,3]
    r_rleg = T_rleg[0:3,0:3]


    for j in range(3):
        g[idx] = p_rleg[j] - p_rfijo[j]
        lbg[idx] = 0
        ubg[idx] = 0
        idx +=1
        
        g[idx] = p_lleg[j] - p_lfijo[j]
        lbg[idx] = 0
        ubg[idx] = 0
        idx +=1

    R_err_left = r_lfijo.T@r_lleg # rotación relativa
    R_err_right = r_rfijo.T@r_rleg 

    theta_err_left = ca.vertcat(R_err_left[2,1] - R_err_left[1,2], R_err_left[0,2] - R_err_left[2,0],
                                R_err_left[1,0] - R_err_left[0,1]) / 2.0  # Aproximación de log(R) para pequeñas rotaciones


    theta_err_right = ca.vertcat(R_err_right[2,1] - R_err_right[1,2], R_err_right[0,2] - R_err_right[2,0],
                                 R_err_right[1,0] - R_err_right[0,1]) / 2.0  # Aproximación de log(R) para pequeñas rotaciones


    for j in range(3):
        g[idx] = theta_err_left[j]
        lbg[idx] = 0.0
        ubg[idx] = 0.0
        idx += 1

        g[idx] = theta_err_right[j]
        lbg[idx] = 0.0
        ubg[idx] = 0.0
        idx += 1

    if i<N-1: #evaluar
        q_i1 = q[Dof*(i+1):Dof*(i+2)]
        dq_i = (q_i1-q_i)/dt

        for j in range(Dof_act):
            g[idx] = dq_i[j + 6]
            lbg[idx] = dq_min[j]
            ubg[idx] = dq_max[j]
            idx +=1

        # # #Restriccion de fricción
        f_i = f_contact[24*i:24*(i+1)]

        if i<N-2:
            q_i2 = q[Dof*(i+2):Dof*(i+3)]
            ddq_i = (q_i2 - 2*q_i1 + q_i)/ dt**2

            rpy = q_i[3:6]
            drpy = dq_i[3:6]
            dyn_q = dynamic_q(q_i)
            dyn_dq = dynamic_dq(q_i,rpy)
            dyn_ddq = dynamic_ddq(rpy, drpy,ddq_i)

            M_i =  M_din(dyn_q) #M(q_i1)
            b_i = b_din(dyn_q,dyn_dq)
            J_i = Jacobian_contacts(q_i)

            tau_i = tau[Dof_act*i:Dof_act*(i+1)]
            dyn = M_i@dyn_ddq + b_i - J_i.T@f_i - S@tau_i
            #dyn = ca.mtimes(M_i, dyn_ddq) + b_i -  ca.mtimes(J_i.T, f_i) - ca.mtimes(S, tau_i)


            for j in range(8):  # 8 puntos de contacto
                fx = f_i[3*j + 0] #hola
                fy = f_i[3*j + 1]
                fz = f_i[3*j + 2]

                #f_vec = ca.vertcat(fx, fy, fz)
                #f += 0.05*ca.sumsqr(f_vec - f_des)  # Penalización cuadrática por desviación del valor desead

                #f += 10* (fx**2 + fy**2)
                #Friction cone constraint: mu^2 * fz^2 - fx^2 - fy^2 >= 0
                g[idx] =  mu**2 * fz**2 - fx**2 - fy**2
                lbg[idx] = 0
                ubg[idx] = ca.inf
                idx += 1


            for j in range(Dof):
                g[idx] = dyn[j]  
                lbg[idx] = 0
                ubg[idx] = 0
                idx +=1


# Costo para que la velocidad final sea cercana a cero
# Considera q_{N-1} y q_{N-2}
q_N1 = q[Dof*(N-1):Dof*N]
q_N2 = q[Dof*(N-2):Dof*(N-1)]

dq_final = (q_N1 - q_N2) / dt  # Velocidad final aproximada
f += 100* ca.sumsqr(dq_final)



print("IDX:",idx)
g_all=ca.vertcat(*g)

nlp = {}
nlp['x'] = ca.vertcat(q, tau, f_contact)
nlp['f'] = f
nlp['g'] = g_all
opts={"max_iter_eig": 500}
# opts = {
#      'ipopt': {
#          'print_level': 0     # 0 = no iteration output
#      }
#  }

solver = nlpsol('solver','ipopt',nlp)

lbq=ca.repmat(q_min,N)
ubq=ca.repmat(q_max,N)

lbtau =ca.repmat(tau_min,N)
ubtau = ca.repmat(tau_max,N)

lbf = ca.repmat([-ca.inf]*3*8,N)
ubf = ca.repmat([ca.inf]*3*8,N)


# data = np.load("/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/warmstart_brazos.npz")

# q_warm = data['q_full']
# q0= q_warm.reshape((-1, 1))  # (Dof*N, 1)

q0 = np.zeros(Dof*N)
tau0 = np.zeros(Dof_act*N)
fc0 = np.zeros(24*N)
x_init = ca.vertcat(ca.DM(q0), ca.DM(tau0), ca.DM(fc0))


sol = solver(x0 = x_init,
            lbx=vertcat(lbq,lbtau,lbf),
            ubx=vertcat(ubq,ubtau,ubf),
            lbg=lbg, ubg=ubg)


end = time.time() 

q_full= (sol['x'][:Dof * N]).reshape((Dof,N))
tau_resultado = (sol['x'][Dof*N :(Dof+Dof_act)*N]).reshape((26,N))      
tau_resultado = np.array(tau_resultado)
fuerzas_resultado = (sol['x'][Dof*N + Dof_act*N:]).reshape((24,N))
fuerzas_resultado = np.array(fuerzas_resultado)


print("Tiempo de optimización: ", end-start)


np.savez("warmstart_brazos.npz", q_full=q_full)
np.savez("tau.npz", tau_resultado=tau_resultado)
np.savez("fuerzas.npz", fuerzas_resultado=fuerzas_resultado)


def publish_tf(br, position, rpy, frame_id="world", child_frame_id="base_link"):
    t = geometry_msgs.msg.TransformStamped()
    t.header.stamp = rospy.Time.now()
    t.header.frame_id = frame_id
    t.child_frame_id = child_frame_id
    t.transform.translation.x = position[0]
    t.transform.translation.y = position[1]
    t.transform.translation.z = position[2]


    quat = R.from_euler('zyx', [rpy[2],rpy[1],rpy[0]]).as_quat()
    t.transform.rotation.x = quat[0]
    t.transform.rotation.y =  quat[1]
    t.transform.rotation.z = quat[2]
    t.transform.rotation.w = quat[3]

    br.sendTransform(t)


def send_joint_states(q_full, rate_hz= 20):
    q_full = np.array(q_full)
    br = tf2_ros.TransformBroadcaster()

    jnames = [
        "HeadYaw", "HeadPitch",
        "LHipYawPitch", "LHipRoll", "LHipPitch", "LKneePitch", "LAnklePitch", "LAnkleRoll",
        "RHipYawPitch", "RHipRoll", "RHipPitch", "RKneePitch", "RAnklePitch", "RAnkleRoll",
        "LShoulderPitch", "LShoulderRoll", "LElbowYaw", "LElbowRoll", "LWristYaw", "LHand",
        "RShoulderPitch", "RShoulderRoll", "RElbowYaw", "RElbowRoll", "RWristYaw", "RHand",
        "RFinger23", "RFinger13", "RFinger12",
        "LFinger21", "LFinger13", "LFinger11",
        "RFinger22", "LFinger22", "RFinger21",
        "LFinger12", "RFinger11", "LFinger23",
        "LThumb1", "RThumb1", "RThumb2", "LThumb2"
    ]

    pub = rospy.Publisher('/joint_states', JointState, queue_size=10)
    rospy.init_node('nao_joint_sender', anonymous=True)
    rate = rospy.Rate(rate_hz)

    for i in range(N):

        pos = q_full[0:3, i]       # x, y, z
        rpy = q_full[3:6, i]       # roll, pitch, yaw
        

        # Publica TF desde world → torso
        publish_tf(br, pos, rpy)
        
        jstate = JointState()
        jstate.header.stamp = rospy.Time.now()
        jstate.name = jnames

        q_actuated = q_full[6:32, i]  # Solo las 26 articulaciones actuables
        q_extra = np.zeros(len(jnames) - 26)  # Dedos y pulgares en 0
        jstate.position = np.concatenate([q_actuated, q_extra]).tolist()

        pub.publish(jstate)
        rate.sleep()


def plot_results(q_full,fuerzas,tau):

    jnames = [
        "HeadYaw", "HeadPitch",
        "LHipYawPitch", "LHipRoll", "LHipPitch", "LKneePitch", "LAnklePitch", "LAnkleRoll",
        "RHipYawPitch", "RHipRoll", "RHipPitch", "RKneePitch", "RAnklePitch", "RAnkleRoll",
        "LShoulderPitch", "LShoulderRoll", "LElbowYaw", "LElbowRoll", "LWristYaw", "LHand",
        "RShoulderPitch", "RShoulderRoll", "RElbowYaw", "RElbowRoll", "RWristYaw", "RHand",
        "RFinger23", "RFinger13", "RFinger12",
        "LFinger21", "LFinger13", "LFinger11",
        "RFinger22", "LFinger22", "RFinger21",
        "LFinger12", "RFinger11", "LFinger23",
        "LThumb1", "RThumb1", "RThumb2", "LThumb2"
    ]


    for i in range(6):
        plt.plot(q_full[20 + 6 +i,:].flatten(),  label=jnames[20 + i])

    plt.title("Evolución de las articulaciones del brazo derecho")
    plt.xlabel("Paso de tiempo")
    plt.ylabel("Ángulo articular (rad)")
    plt.legend()
    #plt.ylim(-6,6)
    #plt.xlim(0,N)
    plt.grid(True)
    plt.tight_layout()
    plt.show()


    #plt.figure(figsize=(10, 6))
    for i in range(6):
        plt.plot(q_full[14 + 6 +i,:].flatten(), label=jnames[14 + i])

    plt.title("Evolución de las articulaciones del brazo izquierdo")
    plt.xlabel("Paso de tiempo")
    plt.ylabel("Ángulo articular (rad)")
    plt.legend()
    #plt.ylim(-6,6)
    #plt.xlim(0,N)
    plt.grid(True)
    plt.tight_layout()
    plt.show()


    fig = plt.figure(figsize=(14, 8))
    ax = fig.add_subplot(111, projection='3d')

    # Dibujar cono de fricción ideal (sólo para referencia visual)
    theta = np.linspace(0, 2 * np.pi, 50)
    h = 8.0
    r = mu * h
    x_cone = r * np.outer(np.cos(theta), np.linspace(0, 1, 10))
    y_cone = r * np.outer(np.sin(theta), np.linspace(0, 1, 10))
    z_cone = h * np.outer(np.ones_like(theta), np.linspace(0, 1, 10))
    ax.plot_surface(x_cone, y_cone, z_cone, alpha=0.2, color='gray')

    # Colores para contactos
    colors = plt.cm.tab10(np.linspace(0, 1, 8))

    # Dibujar las fuerzas
    for contact in range(8):
        fx = fuerzas[3 * contact, :]
        fy = fuerzas[3 * contact + 1, :]
        fz = fuerzas[3 * contact + 2, :]
        
        # Verificación de la condición de fricción
        inside_cone = mu ** 2 * fz ** 2 - fx ** 2 - fy ** 2 >= 0

        # Fuerzas dentro del cono en verde
        ax.quiver(
            np.zeros_like(fx[inside_cone]),  # desplazamiento en x por contacto
            np.zeros_like(fy[inside_cone]),
            np.zeros_like(fz[inside_cone]),
            fx[inside_cone], fy[inside_cone], fz[inside_cone],
            color=colors[contact],
            label=f'Contacto {contact+1}' if contact == 0 else None,
            alpha=0.7
        )

        # Opcional: fuerzas fuera del cono en rojo
        ax.quiver(
            np.zeros_like(fx[~inside_cone]) + contact * 2,
            np.zeros_like(fy[~inside_cone]),
            np.zeros_like(fz[~inside_cone]),
            fx[~inside_cone], fy[~inside_cone], fz[~inside_cone],
            color='red',
            alpha=0.5
        )

    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title('Fuerzas y Cono de Fricción')
    ax.legend()
    plt.tight_layout()
    plt.show()   

    plt.figure(figsize=(12, 6))
    for i in range(26):
        plt.plot(tau[i,:].flatten(), label=jnames[i])

    plt.xlabel('Tiempo')
    plt.ylabel('Torque')
    plt.title('Torque de las 26 articulaciones en el tiempo')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')  # Mueve la leyenda fuera del gráfico
    plt.tight_layout()
    plt.grid(True)
    plt.show()



if __name__ == '__main__': 
    q_full = np.array(q_full)
    #plt.figure(figsize=(10, 6))

    plot_results(q_full,fuerzas_resultado,tau_resultado)
    send_joint_states(q_full)



def nao_trajectory(q_full):
    robot_ip = "192.168.10.157"  # Replace with your robot's IP
    robot_port = 9559

    # Create an application instance
    app = qi.Application(["NAOqiApp", f"--qi-url=tcp://{robot_ip}:{robot_port}"])
    app.start()  # Start the application
    session = app.session  # Get the session from the application
    try:
        print("Connected to the robot!")
    except Exception as e:
        print(f"Failed to connect to robot: {e}")
    
    finally:
        
        # Enviar primer frame (omitimos las 6 filas de la base flotante)
        q0 = np.array(q_full[6:, 0].flatten())
        joints_all(session, q0.tolist())

        # Esperar 3 segundos
        time.sleep(3)

        # Enviar el resto de la trayectoria
        for i in range(1, N):
            qi_frame = np.array(q_full[6:, i].flatten())
            joints_all(session, qi_frame.tolist())

        app.stop()
