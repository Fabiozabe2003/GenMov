#!/usr/bin/env python3
import casadi as ca
from casadi import *
from forward_kinematics import *
from nao_dynamics import *
from nao_jacobian import *
from nao_limits import *
from read_data import *
import time
import numpy as np
from nao_skills import *
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import rospy
from sensor_msgs.msg import JointState
import tf2_ros
import geometry_msgs.msg
from scipy.spatial.transform import Rotation as R


# Matrices dinamicas
model_path = "/home/invitado8/proy_ws/src/nao/nao_utec/urdf/"
#model_path = "/home/invitado8/.qibullet/1.4.3/"
#urdf_filename = "naoV40red.urdf"
urdf_filename = "naoV5blue.urdf"

urdf_model_path = join(model_path, urdf_filename)
model = pin.buildModelFromUrdf(urdf_model_path, pin.JointModelFreeFlyer())
data = model.createData()
M_din,b_din = dynamic_matrices_fun(model)
dynamic_ddq = build_dynamic_ddq()
Jacobian_contacts, Jacobian_lcontacts, Jacobian_rcontacts = build_Jacobian_contacts()
CoM = center_of_mass_fun(model)


reconstructed_data, left_contact, right_contact =reconstruct("Step2.csv")
left_hand_points=reconstructed_data["lhand"]
right_hand_points=reconstructed_data["rhand"]
left_elbow_points=reconstructed_data["lforearm"]
right_elbow_points=reconstructed_data["rforearm"]
left_foot_points = reconstructed_data["lfoot"]
right_foot_points = reconstructed_data["rfoot"]

N=len(left_hand_points)

print("TENEMOS N:",N)

#right_contact = np.ones(N,dtype=int )   # reconstructed_data["right_contact"]
left_contact = np.ones(N,dtype=int)    #reconstructed_data["left_contact"]

# Cantidad de puntos en contacto con el suelo (que implican fuerzas de contacto)
N_contacts_right = int(sum(right_contact))
N_contacts_left = int(sum(left_contact))
N2_contacts_right = int(sum(right_contact[:(N-2)]))
N2_contacts_left= int(sum(left_contact[:(N-2)]))


joint_indices = {
    "l_arm": slice(14 + 6, 20 + 6),
    "r_arm": slice(20 + 6 , 26 + 6),
    "f_base": slice(0,6),
    "l_leg": slice(2  + 6, 8 + 6),
    "r_leg": slice(8 + 6, 14 +6),
}


Dof = 32 # 32 cuando agregue los 6 de la base lotante
Dof_act = 26  #26 qs actuados
#N = 90
q = SX.sym('q',Dof*N) # variable 'q' de cuerpo completo
tau = SX.sym('tau',Dof_act*N)  # par para articulaciones actuadas
f_contact = SX.sym('f_contact',  12*(N_contacts_left+N_contacts_right))  # fuerzas de contacto (12 por pie en el suelo)
S = ca.vertcat(ca.DM.zeros(6, 26), ca.DM_eye(26) )  # Dimensión: 32x26
f_des = ca.DM([0, 0, 5.4* 9.81])  # Vector de 24 elementos: [0, 0, mg/8, ..., 0, 0, mg/8]


start = time.time()

f=0 # costo
dt = 0.05
mu = 0.35 # inventado

#total_constraints = Dof_act*(N-1) + 12*(N) + 8*(N-2) + Dof*(N-2) + N
total_constraints = Dof_act*(N-1) + (N_contacts_left + N_contacts_right)*6 + (N2_contacts_left + N2_contacts_right)*4 + Dof*(N-2) + N + 8*N #+ (2*N - N_contacts_left -N_contacts_right)#4*(2*N - N_contacts_left -N_contacts_right )


print("Restricciones de g:",total_constraints)

lbg=[0]*total_constraints
ubg=[0]*total_constraints
g=[0]*total_constraints 


idx = 0
k_fuerzas = 0

p_rfijo = [0, -0.05, 0]
p_lfijo = [0, 0.05 , 0]

r_rfijo =  np.array ([[1, 0, 0],
                      [0, 0, 1],
                      [0, -1, 0]]) 

r_lfijo =  np.array ([[1, 0, 0],
                      [0, 0, 1],
                      [0, -1, 0]]) 





q_squat_left = ca.DM([
    0.0,          # LHipYawPitch
    0.420624,     # LHipRoll
    -0.829031,    # LHipPitch
    2.0944,       # LKneePitch
    -1.0472,      # LAnklePitch
    0.0628318     # LAnkleRoll
])



for i in range(N):
    q_i = q[Dof*i :Dof*(i+1)]  
    g[idx] = q_i[8] - q_i[14] # Restriccion por hip
    lbg[idx] = 0
    ubg[idx] = 0
    idx +=1

    q_i_larm =  q_i[joint_indices["l_arm"]]
    q_i_rarm =  q_i[joint_indices["r_arm"]]
    q_i_base = q_i[joint_indices["f_base"]]
    q_i_lleg = q_i[joint_indices["l_leg"]]
    q_i_rleg = q_i[joint_indices["r_leg"]]

    #f += 10 * ((q_i_base[0]+0.0015)**2 + (q_i_base[1]+ 0.002)**2 +  (q_i_base[2]-0.3148)**2)

    # if i==0:
    #      f += 100*ca.sumsqr(q_i[6:32] - q_inicial_deseado)

    # else :
    f += ca.sumsqr(ca.vertcat(*fkine_left_arm(q_i_larm)[0:3,3])-ca.vertcat(*left_hand_points[i]))   # Mano izquierda
    f +=  ca.sumsqr(ca.vertcat(*fkine_left_elbow(q_i_larm)[0:3,3])-ca.vertcat(*left_elbow_points[i]))  # Codo izquierdo
    f += ca.sumsqr(ca.vertcat(*fkine_right_arm(q_i_rarm)[0:3,3])-ca.vertcat(*right_hand_points[i]))   # Mano derecha
    f +=  ca.sumsqr(ca.vertcat(*fkine_right_elbow(q_i_rarm)[0:3,3])-ca.vertcat(*right_elbow_points[i]))  # Codo derecho

    if (left_contact[i]==0):
        f += 10*ca.sumsqr(ca.vertcat(*fkine_left_foot_constant(q_i_lleg)[0:3,3])-ca.vertcat(*left_foot_points[i]))

        if i < N-1:
            q_i1 = q[Dof*(i+1) : Dof*(i+2)] 
            q_i1_lleg = q_i1[joint_indices["l_leg"]] 
            weights_lleg = ca.SX([1, 1, 0.5, 0.001, 1.0, 1.0])  # soft on LKneePitch (index 3)
            dq_lleg = (q_i1_lleg - q_i_lleg) / dt
            f += ca.sumsqr(weights_lleg * dq_lleg)

        #f += ca.sumsqr((ca.vertcat(*fkine_left_foot_constant(q_i_lleg)[0:3,3]) - ca.vertcat(*left_foot_points[i]))*ca.vertcat(1, 0.05, 1))

        com = CoM(dynamic_q(q_i))
        com_xy = com[0:2] + ca.DM([0.0, 0.03])  # REVISAR ESTO 
        #com_z = com[2]
        
        # g[idx] = ca.sumsqr(fkine_right_foot_constant(q_i_rleg,q_i_base,"c")[0:2,3] - com_xy)
        # lbg[idx] = 0
        # ubg[idx] = 0.02**2
        # idx += 1
        f +=  100*ca.sumsqr(fkine_right_foot_constant(q_i_rleg,q_i_base,"c")[0:2,3] - com_xy)

        #f += 100*ca.sumsqr(com_z - 0.2)
        f += 10*ca.sumsqr(q_i_rleg[3]+ 0.092) # Pie de apoyo
        #f += 10*ca.sumsqr(q_i_rleg[5]- 0.29)  


    c1z,c2z,c3z,c4z = fkine_left_foot_ground(q_i_lleg,q_i_base,"c")
    g[idx] = c1z[2,3]
    lbg[idx] = 0.
    ubg[idx] = ca.inf
    idx +=1
    g[idx] = c2z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    g[idx] = c3z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    g[idx] = c4z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1


    # com_xy = CoM(dynamic_q(q_i))[0:2]

    # f += 100*ca.sumsqr(fkine_left_foot_constant(q_i_lleg,q_i_base,"c")[0:2,3] - com_xy)

    
    if (right_contact[i]==0):  # Pie levantado, seguimos referencia
        f += 10*ca.sumsqr(ca.vertcat(*fkine_right_foot_constant(q_i_rleg)[0:3,3])-ca.vertcat(*right_foot_points[i]))

        #f += ca.sumsqr((ca.vertcat(*fkine_right_foot_constant(q_i_rleg)[0:3,3]) - ca.vertcat(*right_foot_points[i]))*ca.vertcat(0.5, 0.5, 5))


        if i < N-1:
            q_i1 = q[Dof*(i+1) : Dof*(i+2)] 
            q_i1_rleg = q_i1[joint_indices["r_leg"]] 
            weights_rleg = ca.SX([1, 1, 0.5, 0.001, 1.0, 1.0])  # soft on RKneePitch (index 3)
            dq_rleg = (q_i1_rleg - q_i_rleg) / dt
            f += ca.sumsqr(weights_rleg * dq_rleg)



        #f += 10*ca.sumsqr(q_i_rleg[3] - 0.6) # only in swing phase


        
        com = CoM(dynamic_q(q_i))
        com_xy = com[0:2] + ca.DM([0.00, -0.03]) 
        #com_z = com[2]
        
        f += 100*ca.sumsqr(fkine_left_foot_constant(q_i_lleg,q_i_base,"c")[0:2,3] - com_xy) # CENTRO DE MASA COMO COSTO

        #f +=  100*ca.sumsqr(com_z - 0.20)

        #f += 100*ca.sumsqr(q_i_lleg[2:6] - q_squat_left[2:6])
        f += 10*ca.sumsqr(q_i_lleg[3]+ 0.092) # Pie de apoyo
        #f += 10*ca.sumsqr(q_i_lleg[5]- 0.29)


    c5z,c6z,c7z,c8z = fkine_right_foot_ground(q_i_rleg,q_i_base,"c")
    
    g[idx] = c5z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    
    g[idx] = c6z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    
    g[idx] = c7z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    
    g[idx] = c8z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
        

    #f += 10 * (q_i_base[3]**2 + q_i_base[4]**2)

    # Restriccion phi(q) = 0

    if (left_contact[i]):  # Si el pie esta en el piso mantenemos su posicion y orientacion
        T_lleg = fkine_left_foot_constant(q_i_lleg,q_i_base,'c')
        p_lleg = T_lleg[0:3,3]
        r_lleg = T_lleg[0:3,0:3]

        R_err_left = r_lfijo.T@r_lleg 
        theta_err_left = ca.vertcat(R_err_left[2,1] - R_err_left[1,2], R_err_left[0,2] - R_err_left[2,0],
                                R_err_left[1,0] - R_err_left[0,1]) / 2.0  # Aproximación de log(R) para pequeñas rotaciones

        for j in range(3):
            g[idx] = p_lleg[j] - p_lfijo[j]
            lbg[idx] = 0
            ubg[idx] = 0
            idx +=1
        
            g[idx] = theta_err_left[j]
            lbg[idx] = 0.0
            ubg[idx] = 0.0
            idx += 1
 
    if (right_contact[i]): # SI el pie esta en el piso mantenemos posicion y orientacion
        
        T_rleg = fkine_right_foot_constant(q_i_rleg,q_i_base,'c')
        p_rleg = T_rleg[0:3,3]
        r_rleg = T_rleg[0:3,0:3]

        R_err_right = r_rfijo.T@r_rleg 
        theta_err_right = ca.vertcat(R_err_right[2,1] - R_err_right[1,2], R_err_right[0,2] - R_err_right[2,0],
                                 R_err_right[1,0] - R_err_right[0,1]) / 2.0  # Aproximación de log(R) para pequeñas rotaciones


        for j in range(3):
            g[idx] = p_rleg[j] - p_rfijo[j]
            lbg[idx] = 0
            ubg[idx] = 0
            idx +=1

            g[idx] = theta_err_right[j]
            lbg[idx] = 0.0
            ubg[idx] = 0.0
            idx += 1
        
    if i<N-1: #evaluar
        q_i1 = q[Dof*(i+1):Dof*(i+2)]
        dq_i = (q_i1-q_i)/dt

        f += 0.001*(dq_i.T)@(dq_i)

        for j in range(Dof_act):
            g[idx] = dq_i[j + 6]
            lbg[idx] = dq_min[j]
            ubg[idx] = dq_max[j]
            idx +=1

        #Restriccion de fricción

        if (right_contact[i] and left_contact[i]): 
            f_i = f_contact[k_fuerzas:(k_fuerzas+24)]   
            k_fuerzas += 24
        
        elif (left_contact[i] ^ right_contact[i]):  # Si solo tenemos uno pie en contacto, debemos considerar 12 fuerzas
            f_i = f_contact[k_fuerzas:(k_fuerzas+12)]    
            k_fuerzas +=  12

        else:
            f_i = ca.MX.zeros(2) 

        
        if i<N-2:
            q_i2 = q[Dof*(i+2):Dof*(i+3)]
            ddq_i = (q_i2 - 2*q_i1 + q_i)/ dt**2
            f += 0.00001*(ddq_i[6:].T)@(ddq_i[6:])

            rpy = q_i[3:6]
            drpy = dq_i[3:6]
            dyn_q = dynamic_q(q_i)
            dyn_dq = dynamic_dq(dq_i,rpy)
            dyn_ddq = dynamic_ddq(rpy, drpy,ddq_i)

            M_i =  M_din(dyn_q) 
            b_i = b_din(dyn_q,dyn_dq)

            if (right_contact[i] and left_contact[i]): 
                J_i = Jacobian_contacts(q_i)

            elif (left_contact[i]) :
                J_i = Jacobian_lcontacts(q_i)

            elif (right_contact[i]):
                J_i = Jacobian_rcontacts(q_i)

            else:
                J_i = ca.MX.sym('aux', 2, 32)

            tau_i = tau[Dof_act*i:Dof_act*(i+1)]
            dyn = M_i@dyn_ddq + b_i - J_i.T@f_i - S@tau_i
            #dyn = ca.mtimes(M_i, dyn_ddq) + b_i -  ca.mtimes(J_i.T, f_i) - ca.mtimes(S, tau_i)

            
            for j in range(f_i.numel()//3):  # Cantidad de uerzas/3 = puntos de contacto
                fx = f_i[3*j + 0] 
                fy = f_i[3*j + 1]
                fz = f_i[3*j + 2]

                f_vec = ca.vertcat(fx, fy, fz)
                f += 0.01*ca.sumsqr(f_vec - f_des/(f_i.numel()//3))  # Penalización cuadrática por desviación del valor desead

                #f += 10* (fx**2 + fy**2)
                #Friction cone constraint: mu^2 * fz^2 - fx^2 - fy^2 >= 0
                g[idx] =  mu**2 * fz**2 - fx**2 - fy**2
                lbg[idx] = 0
                ubg[idx] = ca.inf
                idx += 1

            for j in range(Dof):
                g[idx] = dyn[j]  
                lbg[idx] = 0
                ubg[idx] = 0
                idx +=1    
            

# Costo para que la velocidad final sea cercana a cero
# Considera q_{N-1} y q_{N-2}
q_N1 = q[Dof*(N-1):Dof*N]
q_N2 = q[Dof*(N-2):Dof*(N-1)]

dq_final = (q_N1 - q_N2) / dt  # Velocidad final aproximada
f += 100* ca.sumsqr(dq_final)


print("IDX:",idx)
g_all=ca.vertcat(*g)

nlp = {}
nlp['x'] = ca.vertcat(q, tau, f_contact)
nlp['f'] = f
nlp['g'] = g_all
opts={"max_iter_eig": 500}


# opts = { 
#     'ipopt.linear_solver': 'ma86',
#     'ipopt.tol': 1e-4,  # tolerancia general más laxa
#     'ipopt.constr_viol_tol': 1e-5,  # tolerancia en restricciones
#     'ipopt.acceptable_tol': 1e-4,  # tolerancia aceptable (para cortar antes)
#     'ipopt.acceptable_constr_viol_tol': 1e-4,
#     'ipopt.acceptable_iter': 5,  # si se alcanza tolerancia aceptable por 5 iteraciones, termina
#     'ipopt.max_iter': 500
# }

solver = nlpsol('solver','ipopt',nlp,opts)

print("INICIALIZADO SOL")

lbq=ca.repmat(q_min,N)
ubq=ca.repmat(q_max,N)

lbtau =ca.repmat(tau_min,N)
ubtau = ca.repmat(tau_max,N)

lbf = ca.repmat([-ca.inf]*(N_contacts_left+N_contacts_right),12)
ubf = ca.repmat([ca.inf]*(N_contacts_left+N_contacts_right),12)


data = np.load("/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/warmstart_brazos.npz")
data2 = np.load("/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/tau.npz")
data3 = np.load("/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/fuerzas.npz")


q_warm = data['q_full']
tau_warm = data2['tau_resultado']
fuerzas_warm = data3['fuerzas_resultado']
q0= q_warm.reshape(-1, order='F')  # (Dof*N, 1)
tau0= tau_warm.reshape(-1, order='F')   
fc0= fuerzas_warm.reshape(-1, order='F')  
print(q0.shape)
print(tau0.shape)
print( fc0.shape)

print(Dof*N)
print(Dof_act*N) 
print(12*(N_contacts_left +  N_contacts_right))
q0 = np.zeros(Dof*N)
tau0 = np.zeros(Dof_act*N)
fc0 = np.zeros(12*(N_contacts_left+N_contacts_right))
x_init = ca.vertcat(ca.DM(q0), ca.DM(tau0), ca.DM(fc0))


print("INICIANDO SOLUCION")

sol = solver(x0 = x_init,
            lbx=vertcat(lbq,lbtau,lbf),
            ubx=vertcat(ubq,ubtau,ubf),
            lbg=lbg, ubg=ubg)


end = time.time() 

q_full= (sol['x'][:Dof * N]).reshape((Dof,N))
tau_resultado = (sol['x'][Dof*N :(Dof+Dof_act)*N]).reshape((26,N))      
tau_resultado = np.array(tau_resultado)
fuerzas_resultado_raw = np.array(sol['x'][Dof*N + Dof_act*N:]) 


# Recuperamos las fuerzas en el orden correcto
k_fuerzas = 0
fuerzas_resultado = np.zeros((24, N))

for i in range(N):
    if (left_contact[i]):  # Si esta en el piso hay fuerzas asociadas
        fuerzas_resultado[0:12,i] = fuerzas_resultado_raw[12*k_fuerzas:12*(k_fuerzas+1)].reshape(12)
        k_fuerzas +=1
    
    if (right_contact[i]): # Si esta en contacto en el piso hay fuerzas asociadas
        fuerzas_resultado[12:24,i] = fuerzas_resultado_raw[12*k_fuerzas:12*(k_fuerzas+1)].reshape(12)
        k_fuerzas +=1
    


print("Tiempo de optimización: ", end-start)


np.savez("warmstart_brazos.npz", q_full=q_full)
np.savez("tau.npz", tau_resultado=tau_resultado)
np.savez("fuerzas.npz", fuerzas_resultado=fuerzas_resultado)


def publish_tf(br, position, rpy, frame_id="world", child_frame_id="base_link"):
    t = geometry_msgs.msg.TransformStamped()
    t.header.stamp = rospy.Time.now()
    t.header.frame_id = frame_id
    t.child_frame_id = child_frame_id
    #print("POSICION DE BASE FLOTANTE AHORA:",position[0],position[1],position[2])
    t.transform.translation.x = position[0]
    t.transform.translation.y = position[1]
    t.transform.translation.z = position[2]


    quat = R.from_euler('zyx', [rpy[2],rpy[1],rpy[0]]).as_quat()
    t.transform.rotation.x = quat[0]
    t.transform.rotation.y =  quat[1]
    t.transform.rotation.z = quat[2]
    t.transform.rotation.w = quat[3]

    br.sendTransform(t)


def send_joint_states(q_full, rate_hz= 20):
    q_full = np.array(q_full)
    br = tf2_ros.TransformBroadcaster()

    jnames = [
        "HeadYaw", "HeadPitch",
        "LHipYawPitch", "LHipRoll", "LHipPitch", "LKneePitch", "LAnklePitch", "LAnkleRoll",
        "RHipYawPitch", "RHipRoll", "RHipPitch", "RKneePitch", "RAnklePitch", "RAnkleRoll",
        "LShoulderPitch", "LShoulderRoll", "LElbowYaw", "LElbowRoll", "LWristYaw", "LHand",
        "RShoulderPitch", "RShoulderRoll", "RElbowYaw", "RElbowRoll", "RWristYaw", "RHand",
        "RFinger23", "RFinger13", "RFinger12",
        "LFinger21", "LFinger13", "LFinger11",
        "RFinger22", "LFinger22", "RFinger21",
        "LFinger12", "RFinger11", "LFinger23",
        "LThumb1", "RThumb1", "RThumb2", "LThumb2"
    ]

    pub = rospy.Publisher('/joint_states', JointState, queue_size=10)
    rospy.init_node('nao_joint_sender', anonymous=True)
    rate = rospy.Rate(rate_hz)

    for i in range(N):

        pos = q_full[0:3, i]       # x, y, z
        rpy = q_full[3:6, i]       # roll, pitch, yaw
        

        # Publica TF desde world → torso
        publish_tf(br, pos, rpy)
        
        jstate = JointState()
        jstate.header.stamp = rospy.Time.now()
        jstate.name = jnames

        q_actuated = q_full[6:32, i]  # Solo las 26 articulaciones actuables
        q_extra = np.zeros(len(jnames) - 26)  # Dedos y pulgares en 0


        jstate.position = np.concatenate([q_actuated, q_extra]).tolist()

        pub.publish(jstate)
        rate.sleep()


def plot_results(q_full,fuerzas,tau):

    jnames = [
        "HeadYaw", "HeadPitch",
        "LHipYawPitch", "LHipRoll", "LHipPitch", "LKneePitch", "LAnklePitch", "LAnkleRoll",
        "RHipYawPitch", "RHipRoll", "RHipPitch", "RKneePitch", "RAnklePitch", "RAnkleRoll",
        "LShoulderPitch", "LShoulderRoll", "LElbowYaw", "LElbowRoll", "LWristYaw", "LHand",
        "RShoulderPitch", "RShoulderRoll", "RElbowYaw", "RElbowRoll", "RWristYaw", "RHand",
        "RFinger23", "RFinger13", "RFinger12",
        "LFinger21", "LFinger13", "LFinger11",
        "RFinger22", "LFinger22", "RFinger21",
        "LFinger12", "RFinger11", "LFinger23",
        "LThumb1", "RThumb1", "RThumb2", "LThumb2"
    ]


    for i in range(6):
        plt.plot(q_full[20 + 6 +i,:].flatten(),  label=jnames[20 + i])

    plt.title("Evolución de las articulaciones del brazo derecho")
    plt.xlabel("Paso de tiempo")
    plt.ylabel("Ángulo articular (rad)")
    plt.legend()
    #plt.ylim(-6,6)
    #plt.xlim(0,N)
    plt.grid(True)
    plt.tight_layout()
    plt.show()


    #plt.figure(figsize=(10, 6))
    for i in range(6):
        plt.plot(q_full[14 + 6 +i,:].flatten(), label=jnames[14 + i])

    plt.title("Evolución de las articulaciones del brazo izquierdo")
    plt.xlabel("Paso de tiempo")
    plt.ylabel("Ángulo articular (rad)")
    plt.legend()
    #plt.ylim(-6,6)
    #plt.xlim(0,N)
    plt.grid(True)
    plt.tight_layout()
    plt.show()


    fig = plt.figure(figsize=(14, 8))
    ax = fig.add_subplot(111, projection='3d')

    # Dibujar cono de fricción ideal (sólo para referencia visual)
    theta = np.linspace(0, 2 * np.pi, 50)
    h = 8.0
    r = mu * h
    x_cone = r * np.outer(np.cos(theta), np.linspace(0, 1, 10))
    y_cone = r * np.outer(np.sin(theta), np.linspace(0, 1, 10))
    z_cone = h * np.outer(np.ones_like(theta), np.linspace(0, 1, 10))
    ax.plot_surface(x_cone, y_cone, z_cone, alpha=0.2, color='gray')

    # Colores para contactos
    colors = plt.cm.tab10(np.linspace(0, 1, 8))

    # Dibujar las fuerzas
    for contact in range(8):
        fx = fuerzas[3 * contact, :]
        fy = fuerzas[3 * contact + 1, :]
        fz = fuerzas[3 * contact + 2, :]
        
        # Verificación de la condición de fricción
        inside_cone = mu ** 2 * fz ** 2 - fx ** 2 - fy ** 2 >= 0

        # Fuerzas dentro del cono en verde
        ax.quiver(
            np.zeros_like(fx[inside_cone]),  # desplazamiento en x por contacto
            np.zeros_like(fy[inside_cone]),
            np.zeros_like(fz[inside_cone]),
            fx[inside_cone], fy[inside_cone], fz[inside_cone],
            color=colors[contact],
            label=f'Contacto {contact+1}' if contact == 0 else None,
            alpha=0.7
        )

        # Opcional: fuerzas fuera del cono en rojo
        ax.quiver(
            np.zeros_like(fx[~inside_cone]) + contact * 2,
            np.zeros_like(fy[~inside_cone]),
            np.zeros_like(fz[~inside_cone]),
            fx[~inside_cone], fy[~inside_cone], fz[~inside_cone],
            color='red',
            alpha=0.5
        )

    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title('Fuerzas y Cono de Fricción')
    ax.legend()
    plt.tight_layout()
    plt.show()   

    plt.figure(figsize=(12, 6))
    for i in range(26):
        plt.plot(tau[i,:].flatten(), label=jnames[i])

    plt.xlabel('Tiempo')
    plt.ylabel('Torque')
    plt.title('Torque de las 26 articulaciones en el tiempo')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')  # Mueve la leyenda fuera del gráfico
    plt.tight_layout()
    plt.grid(True)
    plt.show()



if __name__ == '__main__': 
    q_full = np.array(q_full)
    #plt.figure(figsize=(10, 6))

    plot_results(q_full,fuerzas_resultado,tau_resultado)
    send_joint_states(q_full)



def nao_trajectory(q_full):
    robot_ip = "192.168.10.157"  # Replace with your robot's IP
    robot_port = 9559

    # Create an application instance
    app = qi.Application(["NAOqiApp", f"--qi-url=tcp://{robot_ip}:{robot_port}"])
    app.start()  # Start the application
    session = app.session  # Get the session from the application
    try:
        print("Connected to the robot!")
    except Exception as e:
        print(f"Failed to connect to robot: {e}")
    
    finally:
        
        # Enviar primer frame (omitimos las 6 filas de la base flotante)
        q0 = np.array(q_full[6:, 0].flatten())
        joints_all(session, q0.tolist())

        # Esperar 3 segundos
        time.sleep(3)

        # Enviar el resto de la trayectoria
        for i in range(1, N):
            qi_frame = np.array(q_full[6:, i].flatten())
            joints_all(session, qi_frame.tolist())

        app.stop()
