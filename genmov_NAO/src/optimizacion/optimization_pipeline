#!/usr/bin/env python3
import sys
import casadi as ca
from casadi import *
from forward_kinematics import *
from nao_dynamics import *
from nao_jacobian import *
from nao_limits import *
from read_data import *
import time
import numpy as np
from scipy.spatial.transform import Rotation as R

t_init=time.time()
# Matrices dinamicas
model_path = "/home/invitado8/proy_ws/src/nao/nao_utec/urdf/"
#urdf_filename = "naoV40red.urdf"
urdf_filename = "naoV5blue.urdf"

urdf_model_path = join(model_path, urdf_filename)
model = pin.buildModelFromUrdf(urdf_model_path, pin.JointModelFreeFlyer())
data = model.createData()
M_din,b_din = dynamic_matrices_fun(model)
dynamic_ddq = build_dynamic_ddq()
Jacobian_contacts, Jacobian_lcontacts, Jacobian_rcontacts = build_Jacobian_contacts()
CoM = center_of_mass_fun(model)

#dir=sys.argv[1]
dir="caso3"
print("Dir es el siguiente:",dir)
csv="/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/motions/{}.csv".format(dir)
reconstructed_data, left_contact, right_contact =reconstruct(csv)
left_hand_points=reconstructed_data["lhand"]
right_hand_points=reconstructed_data["rhand"]
left_elbow_points=reconstructed_data["lforearm"]
right_elbow_points=reconstructed_data["rforearm"]
left_foot_points = reconstructed_data["lfoot"]
right_foot_points = reconstructed_data["rfoot"]
left_knee_points = reconstructed_data["lknee"]
right_knee_points = reconstructed_data["rknee"]

N=len(left_hand_points)

print("TENEMOS N:",N)

# Cantidad de puntos en contacto con el suelo (que implican fuerzas de contacto)
N_contacts_right = int(sum(right_contact))
N_contacts_left = int(sum(left_contact))
N2_contacts_right = int(sum(right_contact[:(N-2)]))
N2_contacts_left= int(sum(left_contact[:(N-2)]))


joint_indices = {
    "l_arm": slice(14 + 6, 20 + 6),
    "r_arm": slice(20 + 6 , 26 + 6),
    "f_base": slice(0,6),
    "l_leg": slice(2  + 6, 8 + 6),
    "r_leg": slice(8 + 6, 14 +6),
}


Dof = 32 # 32 cuando agregue los 6 de la base lotante
Dof_act = 26  #26 qs actuados
q = SX.sym('q',Dof*N) # variable 'q' de cuerpo completo
tau = SX.sym('tau',Dof_act*N)  # par para articulaciones actuadas
f_contact = SX.sym('f_contact',  12*(N_contacts_left+N_contacts_right))  # fuerzas de contacto (12 por pie en el suelo)
S = ca.vertcat(ca.DM.zeros(6, 26), ca.DM_eye(26) )  # Dimensión: 32x26
f_des = ca.DM([0, 0, 5.4* 9.81])  # Vector de 24 elementos: [0, 0, mg/8, ..., 0, 0, mg/8]


start = time.time()

f=0 # costo
dt = 0.05
mu = 0.35 

total_constraints = Dof_act*(N-1) + (N_contacts_left + N_contacts_right)*6 + (N2_contacts_left + N2_contacts_right)*4 + Dof*(N-2) + N + 8*N #+ (2*N - N_contacts_left -N_contacts_right)#4*(2*N - N_contacts_left -N_contacts_right )

print("Restricciones de g:",total_constraints)

lbg=[0]*total_constraints
ubg=[0]*total_constraints
g=[0]*total_constraints 


idx = 0
k_fuerzas = 0


p_rfijo = [0, -0.05, 0]
p_lfijo = [0, 0.05 , 0]

r_rfijo =  np.array ([[1, 0, 0],
                      [0, 0, 1],
                      [0, -1, 0]]) 

r_lfijo =  np.array ([[1, 0, 0],
                      [0, 0, 1],
                      [0, -1, 0]]) 





q_squat_left = ca.DM([
    0.0,          # LHipYawPitch
    0.420624,     # LHipRoll
    -0.829031,    # LHipPitch
    2.0944,       # LKneePitch
    -1.0472,      # LAnklePitch
    0.0628318     # LAnkleRoll
])



for i in range(N):
    q_i = q[Dof*i :Dof*(i+1)]  
    g[idx] = q_i[8] - q_i[14] # Restriccion por hip
    lbg[idx] = 0
    ubg[idx] = 0
    idx +=1

    q_i_larm =  q_i[joint_indices["l_arm"]]
    q_i_rarm =  q_i[joint_indices["r_arm"]]
    q_i_base = q_i[joint_indices["f_base"]]
    q_i_lleg = q_i[joint_indices["l_leg"]]
    q_i_rleg = q_i[joint_indices["r_leg"]]


    f += ca.sumsqr(ca.vertcat(*fkine_left_arm(q_i_larm)[0:3,3])-ca.vertcat(*left_hand_points[i]))   # Mano izquierda
    f +=  ca.sumsqr(ca.vertcat(*fkine_left_elbow(q_i_larm)[0:3,3])-ca.vertcat(*left_elbow_points[i]))  # Codo izquierdo
    f += ca.sumsqr(ca.vertcat(*fkine_right_arm(q_i_rarm)[0:3,3])-ca.vertcat(*right_hand_points[i]))   # Mano derecha
    f +=  ca.sumsqr(ca.vertcat(*fkine_right_elbow(q_i_rarm)[0:3,3])-ca.vertcat(*right_elbow_points[i]))  # Codo derecho

    if (left_contact[i]==0):
        f += ca.sumsqr(ca.vertcat(*fkine_left_foot_constant(q_i_lleg)[0:3,3])-ca.vertcat(*left_foot_points[i]))

        f += ca.sumsqr(ca.vertcat(*fkine_left_knee(q_i_lleg)[0:3,3])-ca.vertcat(*left_knee_points[i]))

        com = CoM(dynamic_q(q_i))
        com_xy = com[0:2] #+ ca.DM([0.0, 0.03])  
    
        f +=  100*ca.sumsqr(fkine_right_foot_constant(q_i_rleg,q_i_base,"c")[0:2,3] - com_xy)


        f += 10*ca.sumsqr(q_i_rleg[3]+ 0.092) # Knee del Pie de apoyo
  


    c1z,c2z,c3z,c4z = fkine_left_foot_ground(q_i_lleg,q_i_base,"c")
    g[idx] = c1z[2,3]
    lbg[idx] = 0.
    ubg[idx] = ca.inf
    idx +=1
    g[idx] = c2z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    g[idx] = c3z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    g[idx] = c4z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1

    
    if (right_contact[i]==0):  # Pie levantado, seguimos referencia
        f += ca.sumsqr(ca.vertcat(*fkine_right_foot_constant(q_i_rleg)[0:3,3])-ca.vertcat(*right_foot_points[i]))

        f += ca.sumsqr(ca.vertcat(*fkine_right_knee(q_i_rleg)[0:3,3])-ca.vertcat(*right_knee_points[i]))

        com = CoM(dynamic_q(q_i))
        com_xy = com[0:2] # + ca.DM([0.00, -0.03]) 
       

        f += 100*ca.sumsqr(fkine_left_foot_constant(q_i_lleg,q_i_base,"c")[0:2,3] - com_xy) # CENTRO DE MASA COMO COSTO

        f += 10*ca.sumsqr(q_i_lleg[3]+ 0.092) # Knee del Pie de apoyo


    c5z,c6z,c7z,c8z = fkine_right_foot_ground(q_i_rleg,q_i_base,"c")
    
    g[idx] = c5z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    
    g[idx] = c6z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    
    g[idx] = c7z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
    
    g[idx] = c8z[2,3]
    lbg[idx] = 0
    ubg[idx] = ca.inf
    idx +=1
        

    # Restriccion phi(q) = 0

    if (left_contact[i]):  # Si el pie esta en el piso mantenemos su posicion y orientacion
        T_lleg = fkine_left_foot_constant(q_i_lleg,q_i_base,'c')
        p_lleg = T_lleg[0:3,3]
        r_lleg = T_lleg[0:3,0:3]

        R_err_left = r_lfijo.T@r_lleg 
        theta_err_left = ca.vertcat(R_err_left[2,1] - R_err_left[1,2], R_err_left[0,2] - R_err_left[2,0],
                                R_err_left[1,0] - R_err_left[0,1]) / 2.0  # Aproximación de log(R) para pequeñas rotaciones

        for j in range(3):
            g[idx] = p_lleg[j] - p_lfijo[j]
            lbg[idx] = 0
            ubg[idx] = 0
            idx +=1
        
            g[idx] = theta_err_left[j]
            lbg[idx] = 0.0
            ubg[idx] = 0.0
            idx += 1
 
    if (right_contact[i]): # SI el pie esta en el piso mantenemos posicion y orientacion
        
        T_rleg = fkine_right_foot_constant(q_i_rleg,q_i_base,'c')
        p_rleg = T_rleg[0:3,3]
        r_rleg = T_rleg[0:3,0:3]

        R_err_right = r_rfijo.T@r_rleg 
        theta_err_right = ca.vertcat(R_err_right[2,1] - R_err_right[1,2], R_err_right[0,2] - R_err_right[2,0],
                                 R_err_right[1,0] - R_err_right[0,1]) / 2.0  # Aproximación de log(R) para pequeñas rotaciones


        for j in range(3):
            g[idx] = p_rleg[j] - p_rfijo[j]
            lbg[idx] = 0
            ubg[idx] = 0
            idx +=1

            g[idx] = theta_err_right[j]
            lbg[idx] = 0.0
            ubg[idx] = 0.0
            idx += 1
        
    if i<N-1: #evaluar
        q_i1 = q[Dof*(i+1):Dof*(i+2)]
        dq_i = (q_i1-q_i)/dt

        #f += 0.001*(dq_i.T)@(dq_i)

        for j in range(Dof_act):
            g[idx] = dq_i[j + 6]
            lbg[idx] = dq_min[j]
            ubg[idx] = dq_max[j]
            idx +=1

        #Restriccion de fricción

        if (right_contact[i] and left_contact[i]): 
            f_i = f_contact[k_fuerzas:(k_fuerzas+24)]   
            k_fuerzas += 24
        
        elif (left_contact[i] ^ right_contact[i]):  # Si solo tenemos uno pie en contacto, debemos considerar 12 fuerzas
            f_i = f_contact[k_fuerzas:(k_fuerzas+12)]    
            k_fuerzas +=  12

        else:
            f_i = ca.MX.zeros(2) 

        
        if i<N-2:
            q_i2 = q[Dof*(i+2):Dof*(i+3)]
            ddq_i = (q_i2 - 2*q_i1 + q_i)/ dt**2
            f += 0.00001*(ddq_i[6:].T)@(ddq_i[6:])

            rpy = q_i[3:6]
            drpy = dq_i[3:6]
            dyn_q = dynamic_q(q_i)
            dyn_dq = dynamic_dq(dq_i,rpy)
            dyn_ddq = dynamic_ddq(rpy, drpy,ddq_i)

            M_i =  M_din(dyn_q) 
            b_i = b_din(dyn_q,dyn_dq)

            if (right_contact[i] and left_contact[i]): 
                J_i = Jacobian_contacts(q_i)

            elif (left_contact[i]) :
                J_i = Jacobian_lcontacts(q_i)

            elif (right_contact[i]):
                J_i = Jacobian_rcontacts(q_i)

            else:
                J_i = ca.MX.sym('aux', 2, 32)

            tau_i = tau[Dof_act*i:Dof_act*(i+1)]
            dyn = M_i@dyn_ddq + b_i - J_i.T@f_i - S@tau_i
            #dyn = ca.mtimes(M_i, dyn_ddq) + b_i -  ca.mtimes(J_i.T, f_i) - ca.mtimes(S, tau_i)

            
            for j in range(f_i.numel()//3):  # Cantidad de uerzas/3 = puntos de contacto
                fx = f_i[3*j + 0] 
                fy = f_i[3*j + 1]
                fz = f_i[3*j + 2]

                f_vec = ca.vertcat(fx, fy, fz)
                f += 0.01*ca.sumsqr(f_vec - f_des/(f_i.numel()//3))  # Penalización cuadrática por desviación del valor desead

                #Friction cone constraint: mu^2 * fz^2 - fx^2 - fy^2 >= 0
                g[idx] =  mu**2 * fz**2 - fx**2 - fy**2
                lbg[idx] = 0
                ubg[idx] = ca.inf
                idx += 1

            for j in range(Dof):
                g[idx] = dyn[j]  
                lbg[idx] = 0
                ubg[idx] = 0
                idx +=1    
            

# Costo para que la velocidad final sea cercana a cero
# Considera q_{N-1} y q_{N-2}
q_N1 = q[Dof*(N-1):Dof*N]
q_N2 = q[Dof*(N-2):Dof*(N-1)]

dq_final = (q_N1 - q_N2) / dt  # Velocidad final aproximada
f += 100* ca.sumsqr(dq_final)


print("IDX:",idx)
g_all=ca.vertcat(*g)

nlp = {}
nlp['x'] = ca.vertcat(q, tau, f_contact)
nlp['f'] = f
nlp['g'] = g_all
opts={"max_iter_eig": 500}


opts = { 
    'ipopt.linear_solver': 'ma86',
    'ipopt.tol': 1e-4,  # tolerancia general más laxa
    'ipopt.constr_viol_tol': 1e-5,  # tolerancia en restricciones
    'ipopt.acceptable_tol': 1e-4,  # tolerancia aceptable (para cortar antes)
    'ipopt.acceptable_constr_viol_tol': 1e-4,
    'ipopt.acceptable_iter': 5,  # si se alcanza tolerancia aceptable por 5 iteraciones, termina
    'ipopt.max_iter': 500
}

solver = nlpsol('solver','ipopt',nlp,opts)

print("INICIALIZADO SOL")

lbq=ca.repmat(q_min,N)
ubq=ca.repmat(q_max,N)

lbtau =ca.repmat(tau_min,N)
ubtau = ca.repmat(tau_max,N)

lbf = ca.repmat([-ca.inf]*(N_contacts_left+N_contacts_right),12)
ubf = ca.repmat([ca.inf]*(N_contacts_left+N_contacts_right),12)

print(Dof*N)
print(Dof_act*N) 
print(12*(N_contacts_left +  N_contacts_right))
q0 = np.zeros(Dof*N)
tau0 = np.zeros(Dof_act*N)
fc0 = np.zeros(12*(N_contacts_left+N_contacts_right))
x_init = ca.vertcat(ca.DM(q0), ca.DM(tau0), ca.DM(fc0))

sol = solver(x0 = x_init,
            lbx=vertcat(lbq,lbtau,lbf),
            ubx=vertcat(ubq,ubtau,ubf),
            lbg=lbg, ubg=ubg)


end = time.time() 

q_full= (sol['x'][:Dof * N]).reshape((Dof,N))
tau_resultado = (sol['x'][Dof*N :(Dof+Dof_act)*N]).reshape((26,N))      
tau_resultado = np.array(tau_resultado)
fuerzas_resultado_raw = np.array(sol['x'][Dof*N + Dof_act*N:]) 


# Recuperamos las fuerzas en el orden correcto
k_fuerzas = 0
fuerzas_resultado = np.zeros((24, N))

for i in range(N):
    if (left_contact[i]):  # Si esta en el piso hay fuerzas asociadas
        fuerzas_resultado[0:12,i] = fuerzas_resultado_raw[12*k_fuerzas:12*(k_fuerzas+1)].reshape(12)
        k_fuerzas +=1
    
    if (right_contact[i]): # Si esta en contacto en el piso hay fuerzas asociadas
        fuerzas_resultado[12:24,i] = fuerzas_resultado_raw[12*k_fuerzas:12*(k_fuerzas+1)].reshape(12)
        k_fuerzas +=1
    


print("Tiempo de optimización: ", end-start)


np.savez(f"/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/output_trajectory/{dir}/q.npz", q_full=q_full)
np.savez(f"/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/output_trajectory/{dir}/tau.npz", tau_resultado=tau_resultado)
np.savez(f"/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/output_trajectory/{dir}/fuerzas.npz", fuerzas_resultado=fuerzas_resultado)

# Save time
t_fin=time.time()
filename=f'/home/invitado8/proy_ws/src/GenMov/genmov_NAO/src/optimizacion/times/{dir}.txt'
with open(filename,'r') as file:
    lines = file.readlines()
while len(lines) < 3:
    lines.append("\n")
lines[2]=f"{t_fin-t_init}\n"

with open(filename, 'w') as file:
    file.writelines(lines)
print("Written to line 2")
